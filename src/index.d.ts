import { default as EVENTS, events } from './events';
import { addEnabledElement, getEnabledElement, getEnabledElements, getEnabledElementsByImageId } from './enabledElements';
import { addLayer, getActiveLayer, getLayer, getLayers, getVisibleLayers, purgeLayers, removeLayer, setActiveLayer, setLayerImage } from './layers';
import { convertImageToFalseColorImage, convertToFalseColorImage, restoreImage } from './falseColorMapping';
import { getElementData, removeElementData } from './enabledElementData';
import { loadAndCacheImage, loadImage, registerImageLoader, registerUnknownImageLoader } from './imageLoader';
import { default as canvasToPixel } from './canvasToPixel';
import { default as colors } from './colors/index';
import { default as disable } from './disable';
import { default as displayImage } from './displayImage';
import { default as draw } from './draw';
import { default as drawImage } from './internal/drawImage';
import { default as drawInvalidated } from './drawInvalidated';
import { default as enable } from './enable';
import { default as fitToWindow } from './fitToWindow';
import { default as generateLut } from './internal/generateLut';
import { default as getDefaultViewport } from './internal/getDefaultViewport';
import { default as getDefaultViewportForImage } from './getDefaultViewportForImage';
import { default as getImage } from './getImage';
import { default as getPixels } from './getPixels';
import { default as getStoredPixels } from './getStoredPixels';
import { default as getViewport } from './getViewport';
import { default as imageCache } from './imageCache';
import { default as internal } from './internal/index';
import { default as invalidate } from './invalidate';
import { default as invalidateImageId } from './invalidateImageId';
import { default as metaData } from './metaData';
import { default as pageToPixel } from './pageToPixel';
import { default as pixelDataToFalseColorData } from './pixelDataToFalseColorData';
import { default as pixelToCanvas } from './pixelToCanvas';
import { renderColorImage } from './rendering/renderColorImage';
import { renderGrayscaleImage } from './rendering/renderGrayscaleImage.js';
import { renderLabelMapImage } from './rendering/renderLabelMapImage.js';
import { renderPseudoColorImage } from './rendering/renderPseudoColorImage.js';
import { default as renderToCanvas } from './rendering/renderToCanvas.js';
import { renderWebImage } from './rendering/renderWebImage.js';
import { default as rendering } from './rendering/index.js';
import { default as requestAnimationFrame } from './internal/requestAnimationFrame.js';
import { default as reset } from './reset.js';
import { default as resize } from './resize.js';
import { default as setDefaultViewport } from './internal/setDefaultViewport.js';
import { default as setToPixelCoordinateSystem } from './setToPixelCoordinateSystem.js';
import { default as setViewport } from './setViewport.js';
import { default as storedColorPixelDataToCanvasImageData } from './internal/storedColorPixelDataToCanvasImageData.js';
import { default as storedPixelDataToCanvasImageData } from './internal/storedPixelDataToCanvasImageData.js';
import { default as storedPixelDataToCanvasImageDataColorLUT } from './internal/storedPixelDataToCanvasImageDataColorLUT.js';
import { default as storedPixelDataToCanvasImageDataPseudocolorLUT } from './internal/storedPixelDataToCanvasImageDataPseudocolorLUT.js';
import { default as triggerEvent } from './triggerEvent.js';
import { default as updateImage } from './updateImage.js';
import { default as webGL } from './webgl/index.js';
/**
 * @module PixelCoordinateSystem
 */
/**
 * @module ViewportSettings
 */
declare const cornerstone: {
    drawImage: typeof drawImage;
    generateLut: typeof generateLut;
    getDefaultViewport: typeof getDefaultViewport;
    requestAnimationFrame: typeof requestAnimationFrame;
    storedPixelDataToCanvasImageData: typeof storedPixelDataToCanvasImageData;
    storedColorPixelDataToCanvasImageData: typeof storedColorPixelDataToCanvasImageData;
    storedPixelDataToCanvasImageDataColorLUT: typeof storedPixelDataToCanvasImageDataColorLUT;
    storedPixelDataToCanvasImageDataPseudocolorLUT: typeof storedPixelDataToCanvasImageDataPseudocolorLUT;
    internal: {
        drawImage: typeof drawImage;
        generateLut: typeof generateLut;
        getDefaultViewport: typeof getDefaultViewport;
        requestAnimationFrame: typeof requestAnimationFrame;
        setDefaultViewport: typeof setDefaultViewport;
        storedPixelDataToCanvasImageData: typeof storedPixelDataToCanvasImageData;
        storedPixelDataToCanvasImageDataRGBA: typeof import("./internal/storedPixelDataToCanvasImageDataRGBA").default;
        storedPixelDataToCanvasImageDataColorLUT: typeof storedPixelDataToCanvasImageDataColorLUT;
        storedPixelDataToCanvasImageDataPseudocolorLUT: typeof storedPixelDataToCanvasImageDataPseudocolorLUT;
        storedColorPixelDataToCanvasImageData: typeof storedColorPixelDataToCanvasImageData;
        getTransform: typeof import("./internal/getTransform").default;
        calculateTransform: typeof import("./internal/calculateTransform").default;
        Transform: typeof import("./internal/transform").Transform;
    };
    renderLabelMapImage: typeof renderLabelMapImage;
    renderPseudoColorImage: typeof renderPseudoColorImage;
    renderColorImage: typeof renderColorImage;
    renderGrayscaleImage: typeof renderGrayscaleImage;
    renderWebImage: typeof renderWebImage;
    renderToCanvas: typeof renderToCanvas;
    canvasToPixel: typeof canvasToPixel;
    disable: typeof disable;
    displayImage: typeof displayImage;
    draw: typeof draw;
    drawInvalidated: typeof drawInvalidated;
    enable: typeof enable;
    getElementData: typeof getElementData;
    removeElementData: typeof removeElementData;
    getEnabledElement: typeof getEnabledElement;
    addEnabledElement: typeof addEnabledElement;
    getEnabledElementsByImageId: typeof getEnabledElementsByImageId;
    getEnabledElements: typeof getEnabledElements;
    addLayer: typeof addLayer;
    removeLayer: typeof removeLayer;
    getLayer: typeof getLayer;
    getLayers: typeof getLayers;
    getVisibleLayers: typeof getVisibleLayers;
    setActiveLayer: typeof setActiveLayer;
    getActiveLayer: typeof getActiveLayer;
    purgeLayers: typeof purgeLayers;
    setLayerImage: typeof setLayerImage;
    fitToWindow: typeof fitToWindow;
    getDefaultViewportForImage: typeof getDefaultViewportForImage;
    setDefaultViewport: typeof setDefaultViewport;
    getImage: typeof getImage;
    getPixels: typeof getPixels;
    getStoredPixels: typeof getStoredPixels;
    getViewport: typeof getViewport;
    loadImage: typeof loadImage;
    loadAndCacheImage: typeof loadAndCacheImage;
    registerImageLoader: typeof registerImageLoader;
    registerUnknownImageLoader: typeof registerUnknownImageLoader;
    invalidate: typeof invalidate;
    invalidateImageId: typeof invalidateImageId;
    pageToPixel: typeof pageToPixel;
    pixelToCanvas: typeof pixelToCanvas;
    reset: typeof reset;
    resize: typeof resize;
    setToPixelCoordinateSystem: typeof setToPixelCoordinateSystem;
    setViewport: typeof setViewport;
    updateImage: typeof updateImage;
    pixelDataToFalseColorData: typeof pixelDataToFalseColorData;
    rendering: typeof rendering;
    imageCache: {
        imageCache: Partial<Record<string, Partial<import("./enabledElements").Image>>>;
        cachedImages: Partial<import("./enabledElements").Image>[];
        setMaximumSizeBytes: typeof import("./imageCache").setMaximumSizeBytes;
        putImageLoadObject: typeof import("./imageCache").putImageLoadObject;
        getImageLoadObject: typeof import("./imageCache").getImageLoadObject;
        removeImageLoadObject: typeof import("./imageCache").removeImageLoadObject;
        getCacheInfo: typeof import("./imageCache").getCacheInfo;
        purgeCache: typeof import("./imageCache").purgeCache;
        changeImageIdCacheSize: typeof import("./imageCache").changeImageIdCacheSize;
    };
    metaData: {
        addProvider: typeof import("./metaData").addProvider;
        removeProvider: typeof import("./metaData").removeProvider;
        get: <T>(type: string, imageId: string) => T | undefined;
    };
    webGL: {
        createProgramFromString: typeof import("./webgl/createProgramFromString").default;
        renderer: {
            render: typeof import("./webgl/renderer").render;
            initRenderer: typeof import("./webgl/renderer").initRenderer;
            getRenderCanvas: typeof import("./webgl/renderer").getRenderCanvas;
            isWebGLAvailable: typeof import("./webgl/renderer").isWebGLAvailable;
        };
        textureCache: typeof import("./webgl/textureCache").default;
    };
    colors: {
        getColormap: typeof import("./colors/colormap").getColormap;
        getColormapsList: typeof import("./colors/colormap").getColormapsList;
        LookupTable: typeof import("./colors/lookupTable").default;
    };
    convertImageToFalseColorImage: typeof convertImageToFalseColorImage;
    convertToFalseColorImage: typeof convertToFalseColorImage;
    restoreImage: typeof restoreImage;
    EVENTS: {
        NEW_IMAGE: string;
        INVALIDATED: string;
        PRE_RENDER: string;
        IMAGE_CACHE_MAXIMUM_SIZE_CHANGED: string;
        IMAGE_CACHE_PROMISE_REMOVED: string;
        IMAGE_CACHE_FULL: string;
        IMAGE_CACHE_CHANGED: string;
        WEBGL_TEXTURE_REMOVED: string;
        WEBGL_TEXTURE_CACHE_FULL: string;
        IMAGE_LOADED: string;
        IMAGE_LOAD_FAILED: string;
        ELEMENT_RESIZED: string;
        IMAGE_RENDERED: string;
        LAYER_ADDED: string;
        LAYER_REMOVED: string;
        ACTIVE_LAYER_CHANGED: string;
        ELEMENT_DISABLED: string;
        ELEMENT_ENABLED: string;
    };
    events: import("./events").PolyfillsEventTarget;
    triggerEvent: typeof triggerEvent;
};
export { drawImage, generateLut, getDefaultViewport, setDefaultViewport, requestAnimationFrame, storedPixelDataToCanvasImageData, storedColorPixelDataToCanvasImageData, storedPixelDataToCanvasImageDataColorLUT, storedPixelDataToCanvasImageDataPseudocolorLUT, internal, renderLabelMapImage, renderPseudoColorImage, renderColorImage, renderGrayscaleImage, renderWebImage, renderToCanvas, canvasToPixel, disable, displayImage, draw, drawInvalidated, enable, getElementData, removeElementData, getEnabledElement, addEnabledElement, getEnabledElementsByImageId, getEnabledElements, addLayer, removeLayer, getLayer, getLayers, getVisibleLayers, setActiveLayer, getActiveLayer, purgeLayers, setLayerImage, fitToWindow, getDefaultViewportForImage, getImage, getPixels, getStoredPixels, getViewport, loadImage, loadAndCacheImage, registerImageLoader, registerUnknownImageLoader, invalidate, invalidateImageId, pageToPixel, pixelToCanvas, reset, resize, setToPixelCoordinateSystem, setViewport, updateImage, pixelDataToFalseColorData, rendering, imageCache, metaData, webGL, colors, convertImageToFalseColorImage, convertToFalseColorImage, restoreImage, EVENTS, events, triggerEvent };
export default cornerstone;
